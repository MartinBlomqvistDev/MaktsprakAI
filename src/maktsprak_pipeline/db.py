# =========================================================
# Fil: src/maktsprak_pipeline/db.py
# Syfte: Databasmodul för MaktspråkAI (NU FÖR POSTGRESQL/SUPABASE)
# Beroenden:
#   - psycopg2-binary, logger, config
# =========================================================

# Byt sqlite3 mot psycopg2 för molndatabas
import psycopg2 
from pathlib import Path
from .logger import get_logger
# Importera de nya variablerna från config.py (måste matcha config.py)
from .config import DB_USER, DB_PASSWORD, DB_HOST, DB_NAME, DB_PORT

logger = get_logger()

# -----------------------------
# Skapa connection (Ansluter till PostgreSQL)
# -----------------------------
# I filen: src/maktsprak_pipeline/db.py
import streamlit as st
import psycopg2

def get_secrets():
    # Hämta databas-hemligheterna från Streamlit Secrets
    secrets = st.secrets.connections.supabase
    # Returnera som strängar/int för anslutning
    return secrets['user'], secrets['password'], secrets['host'], secrets['port'], secrets['dbname']


def create_connection():
    """Skapar en anslutning till PostgreSQL-databasen via Streamlit Secrets."""
    
    # Hämta uppgifterna säkert
    DB_USER, DB_PASSWORD, DB_HOST, DB_PORT, DB_NAME = get_secrets()

    try:
        # Använd uppgifterna för att ansluta
        conn = psycopg2.connect(
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT, 
            dbname=DB_NAME,
            connect_timeout=10 # Lägg till timeout för att hantera nätverkshickor
        )
        return conn
    except Exception as e:
        # Detta är den kritiska loggen som du såg - nu kastar vi ett tydligt fel
        raise Exception(f"Kunde inte ansluta till databasen. Kontrollera Supabase-inställningar och Streamlit Secrets.") from e

# -----------------------------
# Skapa tabeller
# -----------------------------
# OBS: Tabellerna skapas nu manuellt i Supabase med rätt PK/Identity-inställningar
# Men vi behåller funktionerna för att stödja ETL-pipelinen vid behov, 
# fast med PostgreSQL-specifik syntax om de skulle köras.

def create_tweets_table():
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS tweets (
            supabase_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Ny PK
            id BIGINT, -- Ursprungligt Twitter ID
            created_at TIMESTAMP WITH TIME ZONE,
            username TEXT,
            lang TEXT,
            text TEXT,
            url TEXT
        )
        """)
        conn.commit()
    logger.info("Table 'tweets' created or already exists")

def create_speeches_table():
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS speeches (
            supabase_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Ny PK
            id TEXT, -- Ursprungligt text-ID
            protokoll_id TEXT,
            protokoll_datum DATE,
            talare TEXT,
            parti TEXT,
            text TEXT,
            fil_url TEXT
        )
        """)
        conn.commit()
    logger.info("Table 'speeches' created or already exists")

def create_speeches_aug_table():
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS speeches_aug (
            supabase_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Ny PK
            id BIGINT,
            parti TEXT,
            text TEXT
        )
        """)
        conn.commit()
    logger.info("Table 'speeches_aug' created or already exists")

# -----------------------------
# Skapa alla tabeller
# -----------------------------
def create_all_tables():
    create_tweets_table()
    create_speeches_table()
    create_speeches_aug_table()
    logger.info("Alla tabeller skapade eller existerar redan")

# Funktionen add_column_if_not_exists är inte längre relevant för PostgreSQL och kan tas bort
# men om den måste behållas:
def add_column_if_not_exists(table_name: str, column_def: str):
    # Denna funktion är specifikt för SQLite PRAGMA och bör skrivas om helt för PostgreSQL,
    # men vi behåller den gamla signaturen om den anropas i annan kod.
    logger.warning("add_column_if_not_exists används men är inte implementerad för PostgreSQL.")
